<taxonomy>
  <div if="{ this.style && this.style.metadata }" class="container">
    <div class="background-color"><code>background-color</code>: <code>{state.backgroundColor}</code></div>
    <div if="{ this.style.metadata['taxonomy:title'] }" class="taxonomy-item">
      <h1>{ this.style.metadata['taxonomy:title'] }</h1>
    </div>
    <div class="taxonomy-item" each="{ group in this.style.metadata['taxonomy:groups'] }">
      <line-render
        if="{ group.type === 'line' }"
        layers="{this.style.layers}"
        title="{ group.title }"
        group="{ group.id }"
        zooms="{ taxonomy.getZooms(group.zooms) }"
      ></line-render>
      <polygon-render
        if="{ group.type === 'polygon' }"
        layers="{this.style.layers}"
        title="{ group.title }"
        group="{ group.id }"
        zooms="{ taxonomy.getZooms(group.zooms) }"
      ></polygon-render>
      <symbol-render
        if="{ group.type === 'symbol' }"
        layers="{this.style.layers}"
        title="{ group.title }"
        group="{ group.id }"
        zooms="{ taxonomy.getZooms(group.zooms) }"
      ></symbol-render>
      <annotation
        if="{ group.type === 'annotation' }"
        layers="{this.style.layers}"
        content="{ group.content }"
        group="{ group.id }"
        zooms="{ taxonomy.getZooms(group.zooms) }"
      ></annotation>
    </div>
    <div style="font-size: 12px; text-align: center; background-color: rgba(255,255,255, 0.2);">
      Powered by <a href="https://www.jawg.io/">Jawg<span style="color: #2999fd">Maps</span></a
      >. Contribute on <a href="https://github.com/jawg/taxonomy/">GitHub</a>.
    </div>
  </div>
  <script>
    import Annotation from './annotation.riot';
    import LineRender from './line-render.riot';
    import PolygonRender from './polygon-render.riot';
    import SymbolRender from './symbol-render.riot';
    import taxonomy from '../scripts/taxonomy.js';
    export default {
      components: {
        Annotation,
        LineRender,
        PolygonRender,
        SymbolRender,
      },
      fetchStyleURL(callback) {
        var req = new XMLHttpRequest();
        req.addEventListener('load', function () {
          switch (this.status) {
            case 200:
              return callback(null, JSON.parse(this.responseText));
            case 400:
              return callback('You sent a bad request.');
            case 401:
              return callback('You are not authorized to use this style.');
            case 500:
              return callback('This server can not answer yet.');
          }
        });
        req.open('GET', this.props.styleUrl);
        req.send();
      },

      getBackgroundColor(style) {
        var layers = style.layers;
        for (var i in layers) {
          if (layers[i].type === 'background') {
            return layers[i].paint['background-color'];
          }
        }
      },

      onMounted() {
        if (!this.props.styleUrl) {
          return console.error('Style URL is missing');
        }
        this.fetchStyleURL((err, res) => {
          if (err) {
            return console.error('Error in fetch style');
          }
          this.style = res;
          let backgroundColor = this.getBackgroundColor(res) || '#fff';
          this.update({ backgroundColor });
        });
      },

      onUpdated(props, states) {
        this.$('.container').style['background-color'] = states.backgroundColor;
        taxonomy.fonts.download();
        const hash = location && /^#[a-zA-Z0-9]/.test(location.hash) && location.hash;
        const hashElt = hash && this.$(hash);
        if (hashElt) {
          window.scrollTo({
            top: hashElt.offsetTop,
            behavior: 'smooth',
          });
        }
      },
      taxonomy,
    };
  </script>
  <style>
    taxonomy {
      margin: auto;
      font-family: 'Roboto', Helvetica, Arial, sans-serif;
      font-size: 16px;
      line-height: 1em;
    }

    taxonomy .background-color {
      top: 0;
      left: 0;
      padding-top: 0.5em;
    }

    code {
      padding: 0.25em 0.5em;
      border-radius: 0.5em;
      line-height: 2em;
      background-color: #eee;
    }

    taxonomy h1 {
      margin: 0;
    }

    taxonomy h1,
    taxonomy h2 {
      line-height: 1.5;
      text-align: center;
      background-color: rgba(255,255,255, 0.2);
    }

    taxonomy a {
      color: inherit;
      text-decoration: none;
    }

    taxonomy > .container {
      min-height: 100%;
      min-width: 500px;
      padding: 0 30px;
      margin: auto;
    }

    taxonomy .taxonomy-item {
      padding: 20px 0;
      border-bottom: 1px solid #eaecef;
    }

    taxonomy .render-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
    }

    taxonomy .render-column,
    taxonomy render-item {
      padding: 0px;
      display: flex;
      flex-direction: column;
      text-align: left;
    }

    taxonomy span.render-header {
      font-weight: bold;
      text-align: center;
      background-color: rgba(255,255,255, 0.2);
      border-radius: 1rem;
      padding: 0 0.5em;
      margin: 0 0.5em;
    }

    line-render render-item > canvas,
    polygon-render render-item > * {
      margin: auto;
    }

    polygon-render render-item {
      padding: 10px;
    }

    line-render render-item {
      padding: 0px 4px;
    }

    line-render render-item,
    symbol-render render-item {
      display: flex;
      align-items: center;
      flex-direction: row;
      padding: 0px 15px;
    }
    @media print {
      taxonomy .taxonomy-item {
        page-break-inside: avoid;
        break-inside: avoid;
      }
      taxonomy render-item > * {
        page-break-inside: avoid;
        break-inside: avoid;
      }
    }
  </style>
</taxonomy>
