<symbol-render>
  <h2 id="{ props.group }">{ props.title }</h2>
  <div class="render-container">
    <div class="render-column" each="{ zoom in this.props.zooms }">
      <span class="render-header">{ zoom }</span>
      <render-item
        if="{ state.symbols }"
        each="{ symbol in state.symbols }"
        min-height="{ getMinHeight(symbol) }"
        style-props="{ symbolStyleFormatter(symbol[zoom], symbol.fontProps, state.casing[symbol.id] && state.casing[symbol.id][zoom]) }"
      >
        <span>{ symbol.example || symbol.id }</span>
      </render-item>
    </div>
    <div class="render-column">
      <span class="render-header">id</span>
      <render-item if="{ state.symbols }" each="{ symbol in state.symbols }" min-height="{ getMinHeight(symbol) }">
        <span class="render-header">{ symbol.id }</span>
      </render-item>
    </div>
  </div>
  <script>
    import taxonomy from '../scripts/taxonomy.js';
    import renderItem from './render-item.riot';
    import { symbolStyleFormatter } from '../scripts/style-to-css.js';

    export default {
      state: {
        casing: {},
        symbols: [],
      },
      components: {
        renderItem,
      },
      onMounted() {
        this.state.symbols = this.props.layers
          .filter((layer) => {
            return layer.metadata && layer.metadata['taxonomy:group'] === this.props.group && layer.type == 'symbol';
          })
          .reduce(taxonomy.generateLayersWithMatches(), [])
          .map((layer) => {
            if (layer.paint['text-halo-color']) {
              this.state.casing[layer.id] = taxonomy.widthAndColorByZooms(
                layer,
                {
                  'text-width': layer.paint['text-halo-width'],
                  'text-color': layer.paint['text-halo-color'],
                  zooms: this.props.zooms,
                },
                'text'
              );
            }
            const res = taxonomy.widthAndColorByZooms(
              layer,
              {
                'text-width': layer.layout['text-size'],
                'text-color': layer.paint['text-color'],
                zooms: this.props.zooms,
              },
              'text'
            );
            res.id = layer.name || layer.id;
            res['text-transform'] = layer.layout['text-transform'] || 'none';
            res.example = layer.metadata['taxonomy:example'];
            const fontProps = taxonomy.fonts.getProps(layer.layout['text-font'][0]);
            res.fontProps = fontProps;
            taxonomy.fonts.add(fontProps);
            return res;
          });
        this.update();
      },
      getMinHeight(symbol) {
        const res = 8 + symbol.maxWidth + (this.state.casing[symbol.id] ? this.state.casing[symbol.id].maxWidth : 0);
        return res > 25 ? res : 25;
      },
      symbolStyleFormatter,
    };
  </script>
</symbol-render>
