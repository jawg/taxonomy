<polygon-render>
  <h2 id="{ props.group }">{ props.title }</h2>
  <div class="render-container">
    <render-item
      if="{ state.polygons }"
      each="{ polygon in state.polygons }"
      type="canvas"
      min-height="{ state.minHeight }"
      style-props="{ polygonStyleFormatter(polygon, state.casing[polygon.id]) }"
    >
      <span>{ polygon.id }</span>
    </render-item>
  </div>
  <script>
    import taxonomy from '../scripts/taxonomy.js';
    import renderItem from './render-item.riot';
    import { polygonStyleFormatter } from '../scripts/style-to-css.js';

    export default {
      state: {
        casing: {},
        polygons: [],
      },
      components: {
        renderItem,
      },
      onMounted() {
        this.state.polygons = this.props.layers
          .filter((layer) => {
            if (layer.metadata && layer.metadata['taxonomy:group'] === this.props.group) {
              if (layer.type == 'fill' && !layer.metadata['taxonomy:casing']) {
                return true;
              } else if (layer.type == 'line' && layer.metadata['taxonomy:casing']) {
                this.state.casing[layer.metadata['taxonomy:casing']] = layer;
              }
            }
            return false;
          })
          .reduce(taxonomy.generateLayersWithMatches(), [])
          .map((layer) => {
            if (this.state.casing[layer.id]) {
              this.state.casing[layer.id] = {
                'line-color': taxonomy.parseColor(
                  layer,
                  this.state.casing[layer.id].paint['line-color'],
                  this.props.zooms[0]
                ),
                'line-width': taxonomy.parseNumber(
                  layer,
                  this.state.casing[layer.id].paint['line-width'],
                  this.props.zooms[0]
                ),
                id: this.state.casing[layer.id].id,
              };
            } else if (layer.paint['fill-outline-color']) {
              this.state.casing[layer.id] = {
                'line-color': taxonomy.parseColor(layer, layer.paint['fill-outline-color'], this.props.zooms[0]),
                'line-width': 1,
                id: layer.id,
              };
            }
            return {
              'fill-color': taxonomy.parseColor(layer, layer.paint['fill-color'], this.props.zooms[0]),
              id: layer.name || layer.id,
              'fill-opacity': taxonomy.parseNumber(layer, layer.paint['fill-opacity'], this.props.zooms[0]),
            };
          });
        this.update();
      },
      polygonStyleFormatter,
    };
  </script>
</polygon-render>
