<line-render>
  <h2 id="{ props.group }">{ this.props.title }</h2>
  <div class="render-container">
    <div class="render-column" each="{ zoom in props.zooms }">
      <span class="render-header">{ zoom }</span>
      <render-item
        if="{ state.lines }"
        each="{ line in state.lines }"
        type="canvas"
        min-height="{ state.minHeight }"
        style-props="{ lineStyleFormatter(line[zoom], state.casing[line.id] && state.casing[line.id][zoom]) }"
      ></render-item>
    </div>
    <div class="render-column">
      <span class="render-header">id</span>
      <render-item if="{ state.lines }" each="{ line in state.lines }" min-height="{ state.minHeight }">
        <span class="render-header">{ line.id }</span>
      </render-item>
    </div>
  </div>
  <script>
    import taxonomy from '../scripts/taxonomy.js';
    import renderItem from './render-item.riot';
    import { lineStyleFormatter } from '../scripts/style-to-css.js';
    export default {
      state: {
        casing: {},
        lines: [],
        minHeight: 0,
      },
      components: {
        renderItem,
      },
      onMounted() {
        this.state.casing = {};
        this.state.lines = this.props.layers
          .filter((layer) => {
            if (
              layer.metadata &&
              layer.metadata['taxonomy:group'] === this.props.group &&
              (layer.type == 'line' || layer.ref)
            ) {
              if (!layer.metadata['taxonomy:casing'] && !layer.ref) {
                return true;
              }
              this.state.casing[layer.metadata['taxonomy:casing'] || layer.ref] = layer;
            }
            return false;
          })
          .reduce(taxonomy.generateLayersWithMatches(), [])
          .map((layer) => {
            if (this.state.casing[layer.id]) {
              this.state.casing[layer.id] = taxonomy.renderLine(this.state.casing[layer.id], this.props.zooms);
            }
            const res = taxonomy.renderLine(layer, this.props.zooms);
            res.id = layer.name || layer.id;
            return res;
          });
        this.state.minHeight = this.state.lines.reduce((min, line) => Math.max(min, this.getMinHeight(line)), 0);
        this.update();
      },
      getMinHeight(line) {
        const res = 12 + line.maxWidth + (this.state.casing[line.id] ? this.state.casing[line.id].maxWidth : 0);
        return Math.max(res, 25);
      },
      taxonomy,
      lineStyleFormatter,
    };
  </script>
</line-render>
