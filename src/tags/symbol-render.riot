<symbol-render>
  <h2 id="{ props.group }">{ props.title }</h2>
  <div class="render-container">
    <div class="render-column" each="{ zoom in this.props.zooms }">
      <span class="render-header">{ zoom }</span>
      <div if="{ state.symbols }" each="{ symbol in state.symbols }" class="render-item" style="min-height: { getMinHeight(symbol) }px;">
        <span style="font-size: { symbol[zoom].width }px; color: { symbol[zoom].color }; { state.casing[symbol.id] && state.casing[symbol.id][zoom] ? 'text-shadow: 0 0 ' + state.casing[symbol.id][zoom].width + 'px ' + state.casing[symbol.id][zoom].color + ';' : ''} { symbol.fontStyle } text-transform: { symbol['text-transform'] };">{ symbol.example || symbol.id }</span>
      </div>
    </div>
    <div class="render-column">
      <span class="render-header">id</span>
      <div if="{ state.symbols }" each="{ symbol in state.symbols }" class="render-item" style="min-height: { getMinHeight(symbol) }px;">
        { symbol.id }
      </div>
    </div>
  </div>
  <script>
    import taxonomy from '../scripts/taxonomy.js'
    export default {
      state: {
        casing: {},
        symbols: []
      },
      onMounted() {
        this.state.symbols = this.props.layers.filter(layer => {
          return layer.metadata && layer.metadata['taxonomy:group'] === this.props.group && layer.type == 'symbol';
        }).reduce((acc, layer) => {
          taxonomy.autoGenerateMatches(layer);
          if (!layer.metadata['taxonomy:matches'] || layer.metadata['taxonomy:matches'].length < 1) {
            acc.push(layer)
            return acc
          }
          return acc.concat(taxonomy.renderMatches(layer, layer.metadata['taxonomy:matches']));
        }, []).map(layer => {
          if (layer.paint['text-halo-color']) {
            this.state.casing[layer.id] = taxonomy.widthAndColorByZooms(layer, {
              width: layer.paint['text-halo-width'],
              color: layer.paint['text-halo-color'],
              zooms: this.props.zooms
            })
          }
          const res = taxonomy.widthAndColorByZooms(layer, {
            width: layer.layout['text-size'],
            color: layer.paint['text-color'],
            zooms: this.props.zooms
          });
          res.id = layer.name || layer.id;
          res['text-transform'] = layer.layout['text-transform'] || 'none';
          res.example = layer.metadata['taxonomy:example'];
          const fontProps = taxonomy.fonts.getProps(layer.layout['text-font'][0])
          res.fontStyle = this.fontPropsToStyle(fontProps);
          taxonomy.fonts.add(fontProps);
          return res;
        });
        this.update()
      },
      fontPropsToStyle(props) {
        return 'font-style: ' + props.style + '; font-weight: ' + props.weight + '; font-family: \'' + props.family + '\';';
      },
      getMinHeight(symbol) {
        const res = 8 + symbol.maxWidth + (this.state.casing[symbol.id] ? this.state.casing[symbol.id].maxWidth : 0);
        return res > 25 ? res : 25;
      }
    }
  </script>
</symbol-render>